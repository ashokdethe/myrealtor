<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<!--
		Maps request paths to flows in the flowRegistry; e.g. a path of
		/hotels/booking looks for a flow with id "hotels/booking"
	-->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="order" value="0" />
		<property name="flowRegistry" ref="flowRegistry" />
		<property name="interceptors">
			<list>
				<ref bean="myrealtorInterceptor" />
			</list>
		</property>
	</bean>

	<!--
		Maps request paths to @Controller classes; e.g. a path of /hotels
		looks for a controller named HotelsController
	-->
	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">
		<property name="order" value="1" />
		<property name="defaultHandler">
			<!--
				If no @Controller match, map path to a view to render; e.g. the
				"/intro" path would map to the view named "intro"
			-->
			<bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />
		</property>
		<property name="interceptors">
			<list>
				<ref bean="openEntityManagerInViewInterceptor"/>
				<ref bean="myrealtorInterceptor" />
			</list>
		</property>
	</bean>
	<!--
		Resolves logical view names returned by Controllers to Tiles; a view
		name to resolve is treated as the name of a tiles definition
	-->
	<bean id="tilesViewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.webflow.mvc.view.FlowAjaxTilesView" />
	</bean>

	<!-- Configures the Tiles layout system -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
				<value>/WEB-INF/views.xml</value>
				<value>/WEB-INF/jsp/user/views.xml</value>				
				<value>/WEB-INF/jsp/search/views.xml</value>
				<value>/WEB-INF/jsp/myaccount/views.xml</value>				
				<value>/WEB-INF/jsp/providers/views.xml</value>
			</list>
		</property>
	</bean>
	<!-- Dispatches requests mapped to POJO @Controllers implementations -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!--
		Dispatches requests mapped to
		org.springframework.web.servlet.mvc.Controller implementations
	-->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	<!--
		Dispatches requests mapped to flows to FlowHandler implementations
	-->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor" />
	</bean>


	<bean id="myrealtorInterceptor" class="com.myrealtor.spring.mvc.MyRealtorInterceptor">
	</bean>

	<!-- Exception Handler -->
	<bean name="myRealtorExceptionHandler" class="com.myrealtor.spring.mvc.MyRealtorExceptionHandller"></bean>

	<!-- Avoid org.hibernate.LazyInitializationException -->
	<bean id="openEntityManagerInViewInterceptor" class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>


	<!-- Custom FlowHandler for the hotel booking flow 
	<bean name="hotels/booking" class="com.myrealtor.springframework.webflow.samples.booking.BookingFlowHandler" />
	-->

</beans>